from mrjob.job import MRJob
from mrjob.step import MRStep
import math


class partC(MRJob):
	
	def mapper(self, _,line):

		try:
			fields = line.split(',')
			if len(fields) == 9:
				miner = fields[2]
				size = int(fields[4])
				yield (miner, size)

		except:
			pass

	def reducer(self, miner, size):
		yield (miner, sum(size))


	def mapper_2(self, miner, msize):
		yield(None,(miner, msize))

	def combiner_2(self, key, msize):
		newsize = list(sorted(msize, reverse = True, key =lambda x: x[1]))
		for i in newsize[:10]:
			yield(None, i)


	def reducer_2(self, key, msize):
		newsize = list(sorted(msize, reverse = True, key =lambda x: x[1]))
		for i in newsize[:10]:
			yield(i[0],i[1])


	def steps(self):
		return[MRStep(mapper = self.mapper, reducer =self.reducer), MRStep(mapper = self.mapper_2, combiner = self.combiner_2, reducer = self.reducer_2)]

if __name__ == '__main__':
	partC.run()



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































